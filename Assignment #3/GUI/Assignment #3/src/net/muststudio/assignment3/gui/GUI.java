/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.muststudio.assignment3.gui;

import java.awt.FlowLayout;
import javafx.scene.layout.StackPane;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.text.PlainDocument;

import net.muststudio.assignment3.Matrix;
/**
 *
 * @author Kevin
 */
public class GUI extends javax.swing.JFrame {
    Matrix mat;
    JTextField[][] equationInputFields;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        ((PlainDocument)variablesCountInputField.getDocument()).setDocumentFilter(new IntFliter());
        ((PlainDocument)equationsCountInputField.getDocument()).setDocumentFilter(new IntFliter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ShowFieldsButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        variablesCountInputField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        equationsCountInputField = new javax.swing.JTextField();
        equationsPane = new javax.swing.JScrollPane();
        equationsPanel = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ShowFieldsButton.setText("Show Text Fields");
        ShowFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowFieldsButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Variables Count");

        variablesCountInputField.setText("0");

        jLabel2.setText("Equations Count");

        equationsCountInputField.setText("1");

        equationsPane.setBackground(new java.awt.Color(238, 238, 238));
        equationsPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout equationsPanelLayout = new javax.swing.GroupLayout(equationsPanel);
        equationsPanel.setLayout(equationsPanelLayout);
        equationsPanelLayout.setHorizontalGroup(
            equationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 764, Short.MAX_VALUE)
        );
        equationsPanelLayout.setVerticalGroup(
            equationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 355, Short.MAX_VALUE)
        );

        equationsPane.setViewportView(equationsPanel);

        jButton2.setText("One Step");

        jButton3.setText("Solve");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(equationsPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ShowFieldsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(variablesCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(equationsCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShowFieldsButton)
                    .addComponent(jLabel1)
                    .addComponent(variablesCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(equationsCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(equationsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowFieldsButtonActionPerformed
        // This function will handle the status of the matrix - 
        //     creates a matrix, handling all matrix text fields, and so on.
        
        int variableCnt = Integer.valueOf(variablesCountInputField.getText());
        int equationCnt = Integer.valueOf(equationsCountInputField.getText());
        int finalSize = Math.max(variableCnt, equationCnt);
        mat = new Matrix(finalSize);
        
        equationInputFields = new JTextField[finalSize][finalSize + 1];
        equationsPanel.setLayout(new BoxLayout(equationsPanel, BoxLayout.Y_AXIS));
        
        for (int i = 0; i < finalSize; ++i)
        {
            JPanel panelX = new JPanel();
            panelX.setLayout(new FlowLayout());
            
            for (int j = 0; j < finalSize + 1; ++j)
            {
                panelX.add(equationInputFields[i][j] = new JTextField("0",7));
                JLabel x = new JLabel();
                String text = "x" + (j+1) + " +";
                if (j == finalSize - 1)
                    text = "x" + (j+1) + " =";
                x.setText(text);
                if (j < finalSize)
                    panelX.add(x);
            }
            equationsPanel.add(panelX);
            panelX.validate();
        }
        equationsPane.validate();
        
    }//GEN-LAST:event_ShowFieldsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ShowFieldsButton;
    private javax.swing.JTextField equationsCountInputField;
    private javax.swing.JScrollPane equationsPane;
    private javax.swing.JPanel equationsPanel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField variablesCountInputField;
    // End of variables declaration//GEN-END:variables
}

class IntFliter extends DocumentFilter {
    @Override
    public void insertString(FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.insert(offset, string);

        if (test(sb.toString())) {
            super.insertString(fb, offset, string, attr);
        } else {
            showError();
        }
    }

    private boolean test(String text) {
        try {
            Integer.parseInt(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    private void showError() {
        JOptionPane.showMessageDialog(null,  "You can only enter an integer here",
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text,
            AttributeSet attrs) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.replace(offset, offset + length, text);

        if (test(sb.toString())) {
            super.replace(fb, offset, length, text, attrs);
        } else {
            showError();
        }

    }

    @Override
    public void remove(FilterBypass fb, int offset, int length)
            throws BadLocationException {
        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.delete(offset, offset + length);

        if (test(sb.toString())) {
            super.remove(fb, offset, length);
        } else {
            if (sb.toString().equals("")) {
                super.remove(fb, offset, length);
                super.insertString(fb, 0, "0", null);
            }
            else {
                showError();
            }
        }

    }
}