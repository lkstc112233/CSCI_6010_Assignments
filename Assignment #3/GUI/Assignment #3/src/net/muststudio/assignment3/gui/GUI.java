/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.muststudio.assignment3.gui;

import java.awt.FlowLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Scanner;
import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.text.PlainDocument;

import net.muststudio.assignment3.Matrix;
/**
 * 
 * @author Kevin
 */
public class GUI extends javax.swing.JFrame {
    private enum StatusCode {
        NotCreated, ResetMatrix, LockChanging, BeginChanging,
    }
    
    private Matrix mat;
    private JTextField[][] equationInputFields;
    private boolean contentChanged = false;
    private boolean calculationBegun = false;
    private boolean calculationFinished = false;
    private int progress = 0;
    private int offsetForColumn = 0;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        // Add a drop target so you can drop files on the window.
        DropTarget target = new DropTarget(this, DnDConstants.ACTION_COPY, new DropTargetAdapter() {
            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
                boolean acceptFile = false;
                Transferable t = dtde.getTransferable();
                if (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    try {
                        Object td = t.getTransferData(DataFlavor.javaFileListFlavor);
                        acceptFile = true;
                        if (td instanceof List) {
                            for (Object value : ((List) td)) {
                                if (value instanceof File) {
                                    File file = (File) value;
                                    if (!file.exists())
                                        acceptFile = false;
                                }
                            }
                        }
                    } catch (UnsupportedFlavorException | IOException ex) {
                        ex.printStackTrace();
                    }
                }
                if (acceptFile) {
                    dtde.acceptDrag(DnDConstants.ACTION_COPY);
                } else {
                    dtde.rejectDrag();
                }
                repaint();
            }
            @Override
            public void drop(DropTargetDropEvent dtde) {
                dtde.acceptDrop(DnDConstants.ACTION_COPY);
                Transferable t = dtde.getTransferable();
                if (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    try {
                        Object td = t.getTransferData(DataFlavor.javaFileListFlavor);
                        if (td instanceof List) {
                            for (Object value : ((List) td)) {
                                if (value instanceof File) {
                                    File file = (File) value;
                                    if (file.exists()) 
                                        loadFromFile(file);
                                }
                            }
                        }
                    } catch (UnsupportedFlavorException | IOException ex) {
                        ex.printStackTrace();
                    }
                }
                dtde.dropComplete(true);
            }
        });
        // This helps me creating the fliters to ensure that the content 
        // inputed into the two Textfields are integers.
        ((PlainDocument)variablesCountInputField.getDocument()).setDocumentFilter(new IntFliter());
        ((PlainDocument)equationsCountInputField.getDocument()).setDocumentFilter(new IntFliter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ShowFieldsButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        variablesCountInputField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        equationsCountInputField = new javax.swing.JTextField();
        equationsPane = new javax.swing.JScrollPane();
        equationsPanel = new javax.swing.JPanel();
        OneStepButton = new javax.swing.JButton();
        SolveAllButton = new javax.swing.JButton();
        LoadFromFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ShowFieldsButton.setText("Show Text Fields");
        ShowFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowFieldsButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Variables Count");

        variablesCountInputField.setText("0");
        variablesCountInputField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SelectAllWhenGainedControl(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CheckIfNegative(evt);
            }
        });

        jLabel2.setText("Equations Count");

        equationsCountInputField.setText("1");
        equationsCountInputField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SelectAllWhenGainedControl(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CheckIfNegative(evt);
            }
        });

        equationsPane.setBackground(new java.awt.Color(238, 238, 238));
        equationsPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout equationsPanelLayout = new javax.swing.GroupLayout(equationsPanel);
        equationsPanel.setLayout(equationsPanelLayout);
        equationsPanelLayout.setHorizontalGroup(
            equationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 874, Short.MAX_VALUE)
        );
        equationsPanelLayout.setVerticalGroup(
            equationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 355, Short.MAX_VALUE)
        );

        equationsPane.setViewportView(equationsPanel);

        OneStepButton.setText("One Step");
        OneStepButton.setEnabled(false);
        OneStepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OneStepButtonActionPerformed(evt);
            }
        });

        SolveAllButton.setText("Solve");
        SolveAllButton.setEnabled(false);
        SolveAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SolveAllButtonActionPerformed(evt);
            }
        });

        LoadFromFileButton.setText("Load From File");
        LoadFromFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFromFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(equationsPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ShowFieldsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadFromFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(variablesCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(equationsCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OneStepButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SolveAllButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShowFieldsButton)
                    .addComponent(jLabel1)
                    .addComponent(variablesCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(equationsCountInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OneStepButton)
                    .addComponent(SolveAllButton)
                    .addComponent(LoadFromFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(equationsPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowFieldsButtonActionPerformed
        // This function will handle the status of the matrix - 
        //     creates a matrix, handling all matrix text fields, and so on.
        if (mat == null) {
            int variableCnt = Integer.valueOf(variablesCountInputField.getText());
            int equationCnt = Integer.valueOf(equationsCountInputField.getText());
            if (variableCnt < 0)
                return;
            if (equationCnt < 0)
                return;
            int finalSize = Math.max(variableCnt, equationCnt);
            mat = new Matrix(finalSize);

            createTextFields(equationCnt, variableCnt);
            
            changeGuiStatus(StatusCode.BeginChanging);
        } else if (contentChanged) {
            changeGuiStatus(StatusCode.ResetMatrix);
        } else {
            changeGuiStatus(StatusCode.NotCreated);
        }
    }//GEN-LAST:event_ShowFieldsButtonActionPerformed

    private void ShowResult(String result){
        if (result == null)
            return;
        if (!calculationFinished)
            return;
        if (result.equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Something into the equation.");
            changeGuiStatus(StatusCode.ResetMatrix);
        }
        else
            JOptionPane.showMessageDialog(null, result);
    }
    
    private void OneStepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OneStepButtonActionPerformed
        // This function will goes into the function for 1 step.
        if (!calculationBegun) {
            try {
                textFieldsToMat();
            } catch(NumberFormatException e) {
                // Do nothing if we found there is an invalid number.
                return;
            }
            beginCalc();
        }
        if (oneStep()) {
            // That means we don't have further equations to handle with.
            String result = IndicateResults();
            calculationFinished = true;
            OneStepButton.setEnabled(false);
            SolveAllButton.setEnabled(false);
            matToTextFields();
            ShowResult(result);
        }
        else
            matToTextFields();
    }//GEN-LAST:event_OneStepButtonActionPerformed

    private void SolveAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SolveAllButtonActionPerformed
        // This function will goes into the function for all steps.
        if (!calculationBegun) {
            try {
                textFieldsToMat();
            } catch(NumberFormatException e) {
                // Do nothing if we found there is an invalid number.
                return;
            }
            beginCalc();
        }
        // Run until we have no equation to deal with.
        while (!oneStep()) {
            matToTextFields();
        }
        calculationFinished = true;
        String result = IndicateResults();
        OneStepButton.setEnabled(false);
        SolveAllButton.setEnabled(false);
        matToTextFields();
        ShowResult(result);
    }//GEN-LAST:event_SolveAllButtonActionPerformed

    private void SelectAllWhenGainedControl(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SelectAllWhenGainedControl
        ((JTextField)evt.getComponent()).selectAll();
    }//GEN-LAST:event_SelectAllWhenGainedControl

    private void LoadFromFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFromFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
            loadFromFile(chooser.getSelectedFile());
    }//GEN-LAST:event_LoadFromFileButtonActionPerformed

    private void CheckIfNegative(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CheckIfNegative
        if (Integer.parseInt(((JTextField)evt.getComponent()).getText()) < 0){
            JOptionPane.showMessageDialog(null, "You can't input a negative number here!");
            ((JTextField)evt.getComponent()).grabFocus();
        }
    }//GEN-LAST:event_CheckIfNegative

    /** 
     * These two functions handles data transferation between GUI and data structures.
     */
    private void matToTextFields() {
        DecimalFormat form = new DecimalFormat("#.#####");
        int varCount = equationInputFields[0].length - 1;
        for (int i = 0; i < equationInputFields.length; ++i) {
            for (int j = 0; j < varCount; ++j)
                equationInputFields[i][j].setText(form.format(mat.getAt(i, j)));
            equationInputFields[i][varCount].setText(form.format(mat.getAt(i, mat.size())));
        }
    }
    
    private void textFieldsToMat() {
        int varCount = equationInputFields[0].length - 1;
        for (int i = 0; i < equationInputFields.length; ++i) {
            for (int j = 0; j < varCount; ++j)
                mat.setAt(i, j, Double.parseDouble(equationInputFields[i][j].getText()));
            mat.setAt(i, mat.size(), Double.parseDouble(equationInputFields[i][varCount].getText()));
        }
    }
    
    // This function would return the subscript for better performance.
    private String toSubscript(int input) {
        if (input == 0)
            return "\u2080";
        final char[] charBase = new char[]{'\u2080','\u2081','\u2082','\u2083','\u2084','\u2085',
            '\u2086','\u2087','\u2088','\u2089', };
        StringBuilder sb = new StringBuilder();
        while(input != 0) {
            sb.append(charBase[input % 10]);
            input /= 10;
        }
        sb.reverse();
        return sb.toString();
    }
    
    // And this function produces a string indicating the result.
    private String IndicateResults() {
        DecimalFormat form = new DecimalFormat("#.#####");
        int varCount = equationInputFields[0].length - 1;
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < equationInputFields.length; ++i) {
            char prefix = ' ';
            int variableCnt = 0;
            for (int j = 0; j < varCount; ++j) {
                // Skip 0 variables.
                if (Math.abs(mat.getAt(i, j)) < Matrix.SMALL_VALUE)
                    continue;
                result.append(prefix);
                if (Math.abs(mat.getAt(i, j) - 1) > Matrix.SMALL_VALUE)
                    result.append(form.format(mat.getAt(i, j)));
                result.append("x");
                result.append(toSubscript(j + 1));
                result.append(" ");
                prefix = '+';
                variableCnt += 1;
            }
            if (variableCnt == 0) {
                if (Math.abs(mat.getAt(i, mat.size())) > Matrix.SMALL_VALUE) {
                    result = new StringBuilder();
                    result.append("There is no solution to this system.");
                    break;
                }
            } else {
                result.append("= ");
                result.append(form.format(mat.getAt(i, mat.size())));
                result.append('\n');
            }
        }
        return result.toString();
    }
    
    private void loadFromFile(File f) {
        Runnable fileError = ()-> {
            JOptionPane.showMessageDialog(null, "Cannot open this file.");
        };
        try(Scanner scanner = new Scanner(f)){
            int variableCnt;
            int equationCnt;
            if (scanner.hasNextInt())
                variableCnt = scanner.nextInt();
            else{
                fileError.run();
                return;
            }
            if (scanner.hasNextInt())
                equationCnt = scanner.nextInt();
            else{
                fileError.run();
                return;
            }
            int finalSize = Math.max(variableCnt, equationCnt);
            Matrix ourmat = new Matrix(finalSize);
            for (int i = 0; i < equationCnt; ++i){
                for (int j = 0; j < variableCnt; ++j) {
                    double term;
                    if (scanner.hasNextDouble())
                        term = scanner.nextDouble();
                    else {
                        fileError.run();
                        return;
                    }
                    ourmat.setAt(i, j, term);
                }
                double term;
                if (scanner.hasNextDouble())
                    term = scanner.nextDouble();
                else {
                    fileError.run();
                    return;
                }
                ourmat.setAt(i, ourmat.size(), term);
            }
            // If we didn't make it here, all progress are discarded and nothing in the window is changed.
            // And now the file is completely loaded, so we can apply these changes.
            
            
            changeGuiStatus(StatusCode.ResetMatrix);
            changeGuiStatus(StatusCode.NotCreated);
            
            variablesCountInputField.setText(Integer.toString(variableCnt));
            equationsCountInputField.setText(Integer.toString(equationCnt));
            
            mat = ourmat;
            
            createTextFields(equationCnt, variableCnt);
            matToTextFields();
            
            changeGuiStatus(StatusCode.BeginChanging);
            // I'm calling this because we are changing the texts.
            callChanged();
        }catch(IOException e){
            fileError.run();
        }
            
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        File file = null;
        if (args.length > 0)
        {
            file = new File(args[0]);
            if (!file.exists())
                file = null;
        }
        // This final is very important to pass the argument into the anonymous class.
        final File toPass = file;
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            File input = toPass;
            @Override
            public void run() {
                GUI g = new GUI();
                if (toPass != null)
                    g.loadFromFile(input);
                g.setVisible(true);
            }
        });
    }
    
    private void callChanged() {
        contentChanged = true;
        ShowFieldsButton.setText("Clear Equations");
    }
    private void beginCalc(){
        // Status Change. Get all variables ready for calculation.
        calculationBegun = true;
        calculationFinished = false;
        for (JTextField[] fs:equationInputFields)
            for (JTextField f:fs)
                f.setEditable(false);
        progress = 0;
        offsetForColumn = 0;
    }

    private boolean oneStep() {
        // Test if we can pivot the current 
        while (progress + offsetForColumn < equationInputFields[0].length - 1 
                && !mat.pivot(progress, progress + offsetForColumn)) toBreak: { // A dirty solution for goto.
            // Find if there is a number in this column 
            for (int i = progress; i < equationInputFields.length; ++i)
                if (Math.abs(mat.getAt(i, progress + offsetForColumn)) > Matrix.SMALL_VALUE) {
                    mat.elementaryRowOperations(i, progress);
                    if(mat.pivot(progress, progress + offsetForColumn))
                        break toBreak;
                }
            // If we hit here, we can't find a column has a non zero value in our column testing.
            offsetForColumn += 1;
        }
        progress += 1;
        // Return true if we finished all pivoting process.
        return progress >= equationInputFields.length 
                || progress + offsetForColumn >= equationInputFields[0].length - 1;
    }

    private void createTextFields(int equationCnt, int variableCnt) {
        equationInputFields = new JTextField[equationCnt][variableCnt + 1];
        // You have to use a layout manager to make all informations appear on the panel.
        equationsPanel.setLayout(new BoxLayout(equationsPanel, BoxLayout.Y_AXIS));

        FloatFliter fliter = new FloatFliter();

        // This is for valid check in addition to the inputing check - 
        // If user choose to enter a negative number, we have to let that pass;
        // But if the user choose to enter a '-' then leave the rest, we have to fix that.
        FocusListener validCheck = new FocusListener(){
            @Override
            public void focusGained(FocusEvent e) {
                ((JTextField)e.getComponent()).selectAll();
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (((JTextField)e.getComponent()).getText().equals("-")){
                    JOptionPane.showMessageDialog(null,
                            "You can only enter a floating number here",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    (e.getComponent()).requestFocus();
                }
            }
        };

        // Create the text fields for inputs.
        for (int i = 0; i < equationCnt; ++i)
        {
            JPanel panelX = new JPanel();
            panelX.setLayout(new FlowLayout());

            for (int j = 0; j < variableCnt + 1; ++j)
            {
                panelX.add(equationInputFields[i][j] = new JTextField("0",8));
                ((PlainDocument)equationInputFields[i][j].getDocument()).setDocumentFilter(fliter);
                equationInputFields[i][j].addFocusListener(validCheck);
                String text = "x" + toSubscript(j+1) + " +";
                if (variableCnt - 1 == j)
                    text = "x" + toSubscript(j+1) + " =";
                if (j < variableCnt)
                    panelX.add(new JLabel(text));
            }
            panelX.setMaximumSize( panelX.getPreferredSize() );
            equationsPanel.add(panelX);
            panelX.validate();
        }
        equationsPane.validate();
    }
    
    private void changeGuiStatus(StatusCode code) {
        switch(code) {
            case NotCreated:
                mat = null;
                equationInputFields = null;
                contentChanged = false;
                calculationBegun = false;
                calculationFinished = false;
                equationsPanel.removeAll();
                equationsCountInputField.setEditable(true);
                variablesCountInputField.setEditable(true);
                OneStepButton.setEnabled(false);
                SolveAllButton.setEnabled(false);
                ShowFieldsButton.setText("Show Text Fields");
                equationsPanel.revalidate();
                equationsPanel.repaint();
                break;
            case ResetMatrix:
                if (equationInputFields != null)
                    for (JTextField[] fs:equationInputFields)
                        for (JTextField f:fs) {
                            f.setText("0");
                            f.setEditable(true);
                        }
                ShowFieldsButton.setText("Remove Text Fields");
                contentChanged = false;
                calculationBegun = false;
                calculationFinished = false;
                OneStepButton.setEnabled(true);
                SolveAllButton.setEnabled(true);
                break;
            case LockChanging:
                break;
            case BeginChanging:
                equationsCountInputField.setEditable(false);
                variablesCountInputField.setEditable(false);
                OneStepButton.setEnabled(true);
                SolveAllButton.setEnabled(true);
                ShowFieldsButton.setText("Remove Text Fields");
                break;
            default:
                throw new AssertionError(code.name());
        }
    }
    
    // Helper class for checking if the input is valid.
    class FloatFliter extends DocumentFilter {
    @Override
    public void insertString(DocumentFilter.FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.insert(offset, string);

        if (test(sb.toString())) {
            super.insertString(fb, offset, string, attr);
            callChanged();
        } else {
            showError();
        }
    }

    private boolean test(String text) {
        try {
            Double.parseDouble(text);
            return true;
        } catch (NumberFormatException e) {
            return text.equals("-");
        }
    }
    
    private void showError() {
        JOptionPane.showMessageDialog(null,  "You can only enter a floating number here",
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text,
            AttributeSet attrs) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.replace(offset, offset + length, text);

        if (test(sb.toString())) {
            super.replace(fb, offset, length, text, attrs);
            callChanged();
        } else {
            showError();
        }

    }

    @Override
    public void remove(DocumentFilter.FilterBypass fb, int offset, int length)
            throws BadLocationException {
        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.delete(offset, offset + length);

        if (test(sb.toString())) {
            super.remove(fb, offset, length);
            callChanged();
        } else {
            if (sb.toString().equals("")) {
                super.remove(fb, offset, length);
                super.insertString(fb, 0, "0", null);
                callChanged();
            }
            else {
                showError();
            }
        }
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoadFromFileButton;
    private javax.swing.JButton OneStepButton;
    private javax.swing.JButton ShowFieldsButton;
    private javax.swing.JButton SolveAllButton;
    private javax.swing.JTextField equationsCountInputField;
    private javax.swing.JScrollPane equationsPane;
    private javax.swing.JPanel equationsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField variablesCountInputField;
    // End of variables declaration//GEN-END:variables
}

class IntFliter extends DocumentFilter {
    @Override
    public void insertString(FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.insert(offset, string);

        if (test(sb.toString())) {
            super.insertString(fb, offset, string, attr);
        } else {
            showError();
        }
    }

    private boolean test(String text) {
        try {
            Integer.parseInt(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    private void showError() {
        JOptionPane.showMessageDialog(null,  "You can only enter an integer here",
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void replace(FilterBypass fb, int offset, int length, String text,
            AttributeSet attrs) throws BadLocationException {

        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.replace(offset, offset + length, text);

        if (test(sb.toString())) {
            super.replace(fb, offset, length, text, attrs);
        } else {
            showError();
        }

    }

    @Override
    public void remove(FilterBypass fb, int offset, int length)
            throws BadLocationException {
        Document doc = fb.getDocument();
        StringBuilder sb = new StringBuilder();
        sb.append(doc.getText(0, doc.getLength()));
        sb.delete(offset, offset + length);

        if (test(sb.toString())) {
            super.remove(fb, offset, length);
        } else {
            if (sb.toString().equals("")) {
                super.remove(fb, offset, length);
                super.insertString(fb, 0, "0", null);
            }
            else {
                showError();
            }
        }
    }
}